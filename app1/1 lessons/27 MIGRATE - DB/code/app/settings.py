"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# from django.conf.global_settings import STATICFILES_DIRS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(=d(z&huoy6vzhw!h4ko@0gjm=4e^fp&9tanm1q491hd+hak^v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    'goods',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
#! 1) DATABASE adli variable-a verilen DICT icinde hal-hazirda hansi DB istifade edildiyi gosterilir. Movcud DB olaraq 'SQLITE3' istifade edilir. Porqrami işə saldiqda, avtomatik olaraq DB.SQLITE3 adinda fayl yaradilir ve
#! biz butun melumatlari muveqqeti olaraq bu faylda saxlayasiyiq. Ne vaxt ki, proyekti real servere kucereceyik onda, 4 esas DB-den birisini istifade ede bilerik. ( postgresql,  oracle,   mysql,   mariadb ) 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
#! 2) Yuxarida saydigimiz DB-ler hamisi mentiqi olaraq eyni işləyir. Cuzi ferqlilikler xaric olmaqla. DB-se melumatlar gondermek ucun SQL sorgular yazmaq lazimdir. Acnaq DJANGO-da bunu etmeye ehtiyac yoxdur cunki DJANGO-da
#! ORM ( Object-Relational Mapper ) deyilen bir sistem var hansi ki, bu sistem SQL sorgularini avtomatik olaraq verilenler bazası ilə əlaqələndirir. Yəni, ORM sistemi verilənlər bazasına data-ları SQL kamandaları ilə deyil
#! PYTHON kodları ilə əlavə etmək, çağırmaq, yeniləmək və.s etmək imkanı yaradır. PYTHON classları ilə kod yazırıq ORM sistemi bu kodu SQL kamandası kimi oxuyur və verilənlər bazasına dataları göndərir, yeniləyir və.s.

#! 3) Hal-hazirda elimizde DB.SQLITE3 adinda bir fayl var ve içi bosdur. Mecbur deyil ancaq faylin bos oldugunu ve.s daha rahat gormek ucun (DB Browser for SQLite) istifade etmek olar.  2 nomreli sekilde goreceyimiz kimi bos olacaq. 

#! 4) NOT: Proqrami işə saldıqda terminal pəncərədə şəkil 3dəki kimi bir xəta görürük. Bu mesaj, proqramımızda konfiqurasiya edilməmiş verilənlər bazası olduğunu göstərir. 18 tətbiq olunmamış miqrasiyanız var yazsini gore bilerik. 

#! 5) Nədir bu MİGRATİON ? MODEL deyilen bir fayl var ve bu faylda yazdigimiz kod ile yaratmis oldugumuz cedveli DB-se gondermek ucun MİGRATİON faylinda yazdigimiz koddan istifade edirik. Qisaca: 
#! MİGRATİON-da yazdığımız kod MODEL-de yaratdığımız cədvəli verilənlər bazasına əlavə edir. 

#! 6) Üç nomreli sekilde olan xetani ona gore aliriq ki, DEFAULT olaraq DB-de bezi cedveller olmalidir ancaq onlar yoxdur ve olmasi ucun bu cedvelleri MIGRATE etmemiz teleb olunur. 
#! Hemin default olan cedvelleri yaxud indiden sonra ozumuz yaradasi cedvelleri MIGRATE etmek ucun terminalda bele bir kamanda yazmaliyiq:  python manage.py migrate
 



 
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'


STATICFILES_DIRS = [
    BASE_DIR / 'static',
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'